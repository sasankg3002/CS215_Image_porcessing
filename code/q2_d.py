# -*- coding: utf-8 -*-
"""q2_d.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OzXCDlzpYVKtGm1YuY-Qc_elqlKqoT9j
"""

import numpy as np
import matplotlib.pyplot as plt
import math

C=np.array([[1.6250,-1.9486],[-1.9486, 3.8750]])#from the question itself dude !
mue=np.array([[1],[2]])
W,V=np.linalg.eig(C)
A=np.array([[math.sqrt(W[0])*V[0,0],math.sqrt(W[1])*V[0,1]],[math.sqrt(W[0])*V[1,0],math.sqrt(W[1])*V[1,1]]])
output=np.array([np.zeros((10,2,1)),np.zeros((100,2,1)),np.zeros((1000,2,1)),np.zeros((10000,2,1)),np.zeros((100000,2,1))])

np.random.seed(1472)
for i in range(1,6):
  IN=np.random.randn(10**i,2,1)
  for j in range(10**i):
    output[i-1][j]=np.matmul(A,IN[j])+mue
  output[i-1]=np.array(output[i-1])

def trans(arr):
    x,y=np.shape(arr)
    xarr=np.zeros((y,x))
    for i in range(x):
      for j in range(y):
          xarr[j][i]=arr[i][j]
    return xarr
def MLE(arr):
  mean=trans(np.sum(arr,axis=0)/(np.shape(arr)[0]))
  a=np.zeros((2,2))
  for i in arr:
    a+=(trans(i)-mean)*trans(trans(i)-mean)
  a=a*(1/arr.shape[0])
  K=trans(a)
  return (mean,K)
def find_eig_len(arr):
  x_mean,x_k=MLE(arr)
  eigs,V=np.linalg.eig(x_k)
  max_eig=eigs[np.argmax(eigs)]
  vect=V[:,np.argmax(eigs)]
  return  (x_mean,x_mean+np.array([vect*max_eig]))

for i in range(1,6):
  c1,c2=find_eig_len(output[i-1])
  plt.title('generated scatter for N='+str(10**i))
  plt.xlabel('x->')
  plt.ylabel('y')
  plt.scatter(output[i-1][:,0,0],output[i-1][:,1,0])
  plt.plot([c1[0][0],c2[0][0]],[c1[0][1],c2[0][1]],'r-')
  plt.show()